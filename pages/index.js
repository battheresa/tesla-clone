import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';

import Header from '../components/Header';
import Footer from '../components/Footer';
import styles from '../styles/Home.module.css';

import { t } from '../resources/Translations';
import { getImage } from './api/storage';
import { useWindowDimensions } from '../utilities/customHooks';
import { clampOpacity } from '../utilities/customServices';
import { deviceBreakpoint } from '../utilities/config';
import { ChevronDown } from 'react-feather';

function Home() {
    const router = useRouter();
    const { width, height } = useWindowDimensions();

    const [ slide, setSlide ] = useState(0);
    const [ contentScroll, setContentScroll ] = useState(true);
    const [ contentOpacity, setContentOpacity ] = useState(1);
    const [ buttonStyle, setButtonStyle ] = useState({ marginLeft: '60px', marginRight: '60px', opacity: '0' });
    const [ arrowStyle, setArrowStyle ] = useState({ transform: 'translateY(0px)' });

    const [ content, setContent ] = useState([
        { tag: 'auto', title: 'Model S', bgImage: '' },
        { tag: 'auto', title: 'Model Y', bgImage: '' },
        { tag: 'auto', title: 'Model X', bgImage: '' },
        { tag: 'auto', title: 'Model 3', bgImage: '' },
        { tag: router.locale === 'en-us' ? 'solarPanel' : 'Cybertruck', title: router.locale === 'en-us' ? 'Solar Panels' : 'Cybertruck', bgImage: '' },
        { tag: router.locale === 'en-us' ? 'solarRoof' : 'Powerwall', title: router.locale === 'en-us' ? 'Solar Roof' : 'Powerwall', bgImage: '' },
        { tag: 'shop', title: 'Accessories', bgImage: '' },
    ]);

    // arrow animation
    useEffect(() => {
        const interval = setInterval(() => {
            setArrowStyle({ transform: 'translateY(6px)' });
            setTimeout(() => {
                setArrowStyle({ transform: 'translateY(0px)' });
                setTimeout(() => {
                    setArrowStyle({ transform: 'translateY(5px)' });
                    setTimeout(() => {
                        setArrowStyle({ transform: 'translateY(0px)' });
                        setTimeout(() => {}, 1000);
                    }, 200);
                }, 200);
            }, 600);
        }, 2000);

        return () => clearInterval(interval);
    }, []);

    // button animation
    useEffect(() => {
        const interval = setInterval(() => {
            setButtonStyle({ marginLeft: '12px', marginRight: '12px', opacity: '0.85' });
        }, 500);

        return () => clearInterval(interval);
    }, []);

    // load images
    useEffect(async () => {
        const imgSize = width && width < (deviceBreakpoint - 180) ? 'mobile' : 'desktop';
        let nContent = [ ...content ];

        nContent[4].tag = router.locale === 'en-us' ? 'solar-panel' : 'cybertruck';
        nContent[4].title = router.locale === 'en-us' ? 'Solar Panels' : 'Cybertruck';
        
        nContent[5].tag = router.locale === 'en-us' ? 'solar-roof' : 'powerwall';
        nContent[5].title = router.locale === 'en-us' ? 'Solar Roof' : 'Powerwall';

        for (const item of nContent) {
            const image = await getImage(item.title.toLowerCase().replaceAll(' ', '-'), `cover-${imgSize}`, 'jpeg');
            item.bgImage = image;
            setContent(nContent);
        }
    }, [width, router.locale]);

    // update current slide
    const handleOnScroll = (offset) => {  
        const benchmark = height / 2;
        setSlide(0);
        setContentOpacity(clampOpacity(offset, height, slide));

        for (let i = 0; i < content.length; i++) {
            const range = [(height * i) - benchmark, (height * i) + benchmark];
            
            if (offset > range[0] && offset < range[1]) {
                setSlide(i);
                break;
            }
        }
    };
    
    return (
        <div className={styles.container} style={{ height: `${height}px`, overflowY: contentScroll ? 'scroll' : 'hidden' }} onScroll={(e) => handleOnScroll(e.target.scrollTop)}>
            <Head>
                <title>Tesla Clone</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <Header mode='main' curSlide={0} bgColor='white' setScrolling={setContentScroll} />

            <main className={styles.slides}>
                {content.map((item, i) => (
                    <section key={item.title} style={{ height: `${height}px`, backgroundImage: `url(${item.bgImage})` }} />
                ))}

                <div className={styles.content} style={{ height: `${height}px`, opacity: contentOpacity }}>
                    <h1>{content[slide].title}</h1>
                    
                    {content[slide].tag === 'auto' && <h5>{t('description')} <a>{t('link')}</a></h5>}
                    {content[slide].tag === 'solar-panels' && <h5>{t('solarPanels')}</h5>}
                    {content[slide].tag === 'solar-roof' && <h5>{t('solarRoof')}</h5>}
                    {content[slide].tag === 'powerwall' && <h5>{t('powerwall')}</h5>}
                    {content[slide].tag === 'shop' && <h5></h5>}
                    
                    {content[slide].tag === 'auto' && <div>
                        <button color='secondary' variant='contained' style={buttonStyle}>{t('menu.customOrder')}</button>
                        <button color='primary' variant='contained' style={buttonStyle}>{t('menu.existingInventory')}</button>
                    </div>}
                    {content[slide].tag.includes('solar') && <div>
                        <button color='secondary' variant='contained'>{t('menu.orderNow')}</button>
                        <button color='primary' variant='contained'>{t('menu.learnMore')}</button>
                    </div>}
                    {content[slide].tag === 'shop' && <div layout='single'>
                        <button color='secondary' onClick={() => console.log('clicked')} variant='contained'>{t('menu.shopNow')}</button>
                    </div>}

                    {slide === 0 && <span style={arrowStyle}><ChevronDown width={40} height={40} /></span>}
                </div>
            </main>
            
            <Footer open={slide === content.length - 1} />
        </div>
    );
}

export default Home;