import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState, useEffect } from 'react';

import Header from '../components/Header';
import Footer from '../components/Footer';
import styles from '../styles/Home.module.css';

import { Arrow } from '../resources/Element';
import { t } from '../resources/Translations';

import { getImage } from './api/storage';
import { deviceBreakpoint } from '../utilities/config';
import { useWindowDimensions } from '../utilities/customHooks';
import { clampOpacity } from '../utilities/customServices';

function Home() {
    const router = useRouter();
    const { width, height } = useWindowDimensions();
    
    const [ slide, setSlide ] = useState(0);
    const [ bgColor, setBgColor ] = useState('white');
    const [ cybertruckLogo, setCybertruckLogo ] = useState('');
    const [ contentScroll, setContentScroll ] = useState(true);
    const [ contentOpacity, setContentOpacity ] = useState(1);
    const [ buttonStyle, setButtonStyle ] = useState({ marginLeft: '60px', marginRight: '60px', opacity: '0' });

    const [ content, setContent ] = useState([
        { tag: 'auto', title: 'Model S', bgImage: '' },
        { tag: 'auto', title: 'Model Y', bgImage: '' },
        { tag: 'auto', title: 'Model X', bgImage: '' },
        { tag: 'auto', title: 'Model 3', bgImage: '' },
        { tag: router.locale === 'en-us' ? 'solar-panels' : 'cybertruck', title: router.locale === 'en-us' ? 'Solar Panels' : 'Cybertruck', bgImage: '' },
        { tag: router.locale === 'en-us' ? 'solar-roof' : 'powerwall', title: router.locale === 'en-us' ? 'Solar Roof' : 'Powerwall', bgImage: '' },
        { tag: 'shop', title: 'Accessories', bgImage: '' },
    ]);

    // get cybertruck logo
    useEffect(async () => {
        const logo = await getImage('cybertruck', 'text', 'png');
        setCybertruckLogo(`url(${logo})`);
    }, []);

    // button animation
    useEffect(() => {
        const interval = setInterval(() => {
            setButtonStyle({ marginLeft: '12px', marginRight: '12px', opacity: '0.75' });
        }, 500);

        return () => clearInterval(interval);
    }, []);

    // change background color
    useEffect(() => {
        if (width) {
            setBgColor(content[slide].tag === 'powerwall' || (content[slide].tag === 'cybertruck' && width < (deviceBreakpoint - 180)) ? 'black' : 'white');
        }
    }, [width, slide, content]);

    // load images
    useEffect(async () => {
        if (width) {
            const imgSize = width < (deviceBreakpoint - 180) ? 'mobile' : 'desktop';
            let nContent = [ ...content ];

            nContent[4].tag = router.locale === 'en-us' ? 'solar-panels' : 'cybertruck';
            nContent[4].title = router.locale === 'en-us' ? 'Solar Panels' : 'Cybertruck';
            
            nContent[5].tag = router.locale === 'en-us' ? 'solar-roof' : 'powerwall';
            nContent[5].title = router.locale === 'en-us' ? 'Solar Roof' : 'Powerwall';

            for (const item of nContent) {
                const image = await getImage(item.title.toLowerCase().replaceAll(' ', '-'), `cover-${imgSize}`, 'jpeg');
                item.bgImage = image;
                setContent(nContent);
            }
        }
    }, [width, router.locale]);

    // update current slide
    const handleOnScroll = (offset) => {  
        const benchmark = height / 2;
        setSlide(0);
        setContentOpacity(clampOpacity(offset, height, slide));

        for (let i = 0; i < content.length; i++) {
            const range = [(height * i) - benchmark, (height * i) + benchmark];
            
            if (offset > range[0] && offset < range[1]) {
                setSlide(i);
                break;
            }
        }
    };

    // change route
    const changeRoute = (page, selection) => {
        router.push(`/${page}?selection=${selection.toLowerCase().replaceAll(' ', '')}`);
    };
    
    return (
        <div className={styles.container} style={{ height: `${height}px`, overflowY: contentScroll ? 'scroll' : 'hidden' }} onScroll={(e) => handleOnScroll(e.target.scrollTop)}>
            <Head>
                <title>Tesla Clone</title>
                <meta name='description' content='Generated by create next app' content='width=device-width, initial-scale=1.0' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <Header mode='main' curSlide={0} bgColor={bgColor} setScrolling={setContentScroll} />

            <main className={styles.slides}>
                {content.map(item => (
                    <section key={item.title} style={{ height: `${height}px`, backgroundImage: `url(${item.bgImage})` }} />
                ))}

                <div className={styles.content} style={{ height: `${height}px`, opacity: contentOpacity }}>
                    {content[slide].tag !== 'cybertruck' 
                        ? <h1 style={{ color: content[slide].tag === 'powerwall' ? 'var(--white)' : 'var(--black)' }}>{content[slide].title}</h1>
                        : <h1 className={styles.cybertruck} style={{ backgroundImage: cybertruckLogo }} />
                    }
                    
                    {content[slide].tag === 'auto' && <h5>{t('description')} <a>{t('link')}</a></h5>}
                    {content[slide].tag === 'solar-panels' && <h5>{t('solarPanels')}</h5>}
                    {content[slide].tag === 'solar-roof' && <h5>{t('solarRoof')}</h5>}
                    {(content[slide].tag === 'powerwall' || content[slide].tag === 'shop') && <h5></h5>}
                    
                    {content[slide].tag === 'auto' && <div>
                        <button color='secondary' variant='contained' onClick={() => changeRoute('design', content[slide].title)} style={buttonStyle}>{t('menu.customOrder')}</button>
                        <button color='primary' variant='contained' style={buttonStyle}>{t('menu.existingInventory')}</button>
                    </div>}
                    {content[slide].tag === 'cybertruck' && <div className={styles.cybertruckText}>
                        <p>{t('cybertruck')}</p>
                        <button color='primary' variant='outlined'>{t('menu.orderNow')}</button>
                    </div>}
                    {content[slide].tag.includes('solar') && <div>
                        <button color='secondary' variant='contained' onClick={() => changeRoute('custom', content[slide].title)}>{t('menu.orderNow')}</button>
                        <button color='primary' variant='contained'>{t('menu.learnMore')}</button>
                    </div>}
                    {content[slide].tag === 'powerwall' && <div>
                        <button color='secondary' variant='contained' onClick={() => changeRoute('custom', content[slide].title)}>{t('menu.orderNow')}</button>
                        <button color='primary' variant='contained'>{t('menu.learnMore')}</button>
                    </div>}
                    {content[slide].tag === 'shop' && <div layout='single'>
                        <button color='secondary' variant='contained'>{t('menu.shopNow')}</button>
                    </div>}

                    <div name='arrow'>{slide === 0 && <Arrow />}</div>
                </div>
            </main>
            
            <Footer open={slide === content.length - 1} bgColor={content[content.length - 1].bgColor} />
        </div>
    );
}

export default Home;